package com.chaojishipin.sarrs.download.fragment;import android.app.AlertDialog.Builder;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.TextUtils;import android.text.style.BackgroundColorSpan;import android.text.style.ForegroundColorSpan;import android.util.Log;import android.util.SparseArray;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.AdapterView.OnItemLongClickListener;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.chaojishipin.sarrs.ChaoJiShiPinApplication;import com.chaojishipin.sarrs.R;import com.mylib.download.activity.DownloadJobActivity;import com.chaojishipin.sarrs.download.adapter.DownloadFolderAdapter;import com.chaojishipin.sarrs.download.download.Constants;import com.chaojishipin.sarrs.download.download.ContainSizeManager;import com.chaojishipin.sarrs.download.download.DownloadFolderJob;import com.chaojishipin.sarrs.download.download.DownloadHelper;import com.chaojishipin.sarrs.download.download.DownloadJob;import com.chaojishipin.sarrs.download.download.DownloadManager;import com.chaojishipin.sarrs.download.download.DownloadObserver;import com.chaojishipin.sarrs.fragment.ChaoJiShiPinBaseFragment;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenu;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenuAdapter;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenuCreator;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenuItem;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenuLayout;import com.chaojishipin.sarrs.thirdparty.swipemenulistview.SwipeMenuListView;import com.chaojishipin.sarrs.utils.ToastUtil;import com.chaojishipin.sarrs.utils.Utils;import java.io.File;import java.util.ArrayList;public class DownloadListFragment extends ChaoJiShiPinBaseFragment implements DownloadObserver, OnClickListener,        OnItemClickListener, OnItemLongClickListener {    private final static String TAG = "DownloadListFragment";    //    private GestureOverlayView mGesture;    private DownloadManager mDownloadManager;    private ViewGroup rootView;    public SwipeMenuListView mListView;    //    private ViewFlipper mViewFlipper;    public DownloadFolderAdapter adapter;    private Dialog mTipDialog;    private RelativeLayout mDowning_folder;    private TextView mRate_text;    private TextView mDowningJobsCount;    public TextView mUserDeletecount;    public TextView mConfirm_delete;    public DownloadFragment downloadFragment;    public RelativeLayout mBottomlayout;    public static int mCurrItem = 0;    private DownloadCompleteReceiver downloadCompleteReceiver;    private RelativeLayout download_no_item;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        rootView = (ViewGroup) inflater.inflate(                R.layout.download, container, false);//        mGesture = (GestureOverlayView) rootView.findViewById(R.id.gestures);        mBottomlayout = (RelativeLayout) rootView.findViewById(R.id.top_edit_layout);        mUserDeletecount = (TextView) rootView.findViewById(R.id.all_select);        mUserDeletecount.setOnClickListener(this);        mConfirm_delete = (TextView) rootView.findViewById(R.id.confirm_delete);        mConfirm_delete.setOnClickListener(this);        return rootView;    }    @Override    protected void handleInfo(Message msg) {        switch (msg.what) {            case Constants.MESSAGE_DELETE_DOWNLOAD_FILE:                cancelLoadingView();                cancelDelete(false);                mDownloadManager.registerDownloadObserver(DownloadListFragment.this);                mDownloadManager.notifyObservers();                ToastUtil.toastPrompt(getActivity(), R.string.delete_success, 0);                showAvailableSpace();//                    setupListView();                reloadList();                mListView.setIsOpenStatus(true);                break;            default:                break;        }    }    public void cancelDeleteAll(boolean isAll) {        if (isAll) {            mUserDeletecount.setText(R.string.check_all);        } else {            mUserDeletecount.setText(R.string.deselect_all);        }    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mDownloadManager = ChaoJiShiPinApplication.getInstatnce().getDownloadManager();        mDowning_folder = (RelativeLayout) getActivity().findViewById(R.id.item_downing_folder);//      mDowning_folder.setVisibility(View.VISIBLE);        mRate_text = (TextView) getActivity().findViewById(R.id.rate_text);        mDowningJobsCount = (TextView) getActivity().findViewById(R.id.downing_folder_count);        updateListView();        if (null != rootView) {//          mViewFlipper = (ViewFlipper) rootView.findViewById(R.id.DownloadViewFlipper);            download_no_item = (RelativeLayout) rootView.findViewById(R.id.download_no_item);            mListView = (SwipeMenuListView) rootView.findViewById(R.id.DownloadListView);//          mListView.setOnItemClickListener(this);//          mListView.setOnItemLongClickListener(this);//          step 1. create a MenuCreator            SwipeMenuCreator creator = new SwipeMenuCreator() {                @Override                public void create(SwipeMenu menu) {                    // create "delete" item                    SwipeMenuItem deleteItem = new SwipeMenuItem(                            getActivity());                    // set item background                    deleteItem.setBackground(R.drawable.download_swipe_menu_selector);//                deleteItem.setBackground(new ColorDrawable(Color.rgb(0x44, 0x44,//                        0x44)));                    // set item width                    deleteItem.setWidth(Utils.dip2px(75));                    // set a icon                    deleteItem.setIcon(R.drawable.delete_normal);                    deleteItem.setTitleColor(Color.WHITE);                    deleteItem.setTitleSize(12);                    deleteItem.setTitle(getActivity().getString(R.string.delete_up));                    // add to menu                    menu.addMenuItem(deleteItem);                }            };            // set creator            mListView.setMenuCreator(creator);            // step 2. listener item click event            mListView.setOnMenuItemClickListener(new SwipeMenuListView.OnMenuItemClickListener() {                @Override                public boolean onMenuItemClick(int position, SwipeMenu menu, int index) {                    executeDeleteOneItem(position);                    return false;                }            });            // set SwipeListener            mListView.setOnSwipeListener(new SwipeMenuListView.OnSwipeListener() {                @Override                public void onSwipeStart(int position) {                    // swipe start                }                @Override                public void onSwipeEnd(int position) {                    // swipe end                    checkSwipeStatus();                }            });            mListView.setOnItemClickListener(this);            // other setting//		listView.setCloseInterpolator(new BounceInterpolator());            // test item long click            mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {                @Override                public boolean onItemLongClick(AdapterView<?> parent, View view,                                               int position, long id) {                    return false;                }            });        }        mDowning_folder.setOnClickListener(this);        updateView();        showAvailableSpace();    }    private void checkSwipeStatus() {        SwipeMenuLayout mSwipe = null;        mSwipe = mListView.getSwipeMenuLayout();        if (mSwipe != null) {            if (mSwipe.isOpen()) {                downloadFragment.changeDeleteIconText(getResources().getString(R.string.done));            } else                downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));        } else            downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));    }    @Override    public void onPause() {        mHandler.removeCallbacks(mUpdateTimeTask);        mDownloadManager.deregisterDownloadObserver(this);        super.onPause();    }    @Override    public void onResume() {        super.onResume();        cancelDeleteAll(false); //4        if (adapter != null && adapter.isDeleteState()                && adapter.getCount() > 0) {            handleBackOnDelete();        }        mDownloadManager.registerDownloadObserver(this);        mDownloadManager.notifyObservers();//        mGesture.setEnabled(false);        updateView();        showAvailableSpace();    }    @Override    public void onDownloadChanged(DownloadManager manager) {        if(!adapter.isDeleteState()){            mHandler.post(mUpdateTimeTask);        }    }    @Override    public void onDownloadEnd(DownloadManager manager, DownloadJob job) {        reloadList();        showAvailableSpace();    }    class DownloadCompleteReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            reloadList();        }    }    /**     * Runnable periodically querying DownloadService about     * downloads     */    private Runnable mUpdateTimeTask = new Runnable() {        public void run() {            updateListView();        }    };    private void updateListView() {        updateDownloadingFolder();        updateDownLoadingFolderStatus();    }    private void updateView() {        reloadList();        SparseArray<DownloadFolderJob> jobs = mDownloadManager.getProvider().getFolderJobs();        updateDownloadingFolder();        updateDownLoadingFolderStatus();    }    private void reloadList() {        SparseArray<DownloadFolderJob> jobs = mDownloadManager.getProvider().getFolderJobs();        setupListView();        SwipeMenuAdapter swipeAdapter = (SwipeMenuAdapter) mListView.getAdapter();        if (swipeAdapter != null)            adapter = (DownloadFolderAdapter) swipeAdapter.getWrappedAdapter();//        adapter = (DownloadFolderAdapter) ((SwipeMenuAdapter)mListView.getAdapter()).getWrappedAdapter();//         && jobs.size() != swipeAdapter.getCount()        if (swipeAdapter != null && adapter != null && jobs != null) {            adapter.notifyDataSetChanged();        }        else if(adapter == null){            adapter = new DownloadFolderAdapter(jobs, this.getActivity());            adapter.fragment = downloadFragment;            adapter.setList(jobs);            mListView.setAdapter(adapter);        }        if (downloadFragment != null) {            if (null != jobs && jobs.size() > 0) {                downloadFragment.setFilterButtonState(true);            } else {                downloadFragment.setFilterButtonState(false);            }        }    }    /**     * 判断是否有下载中任务，更新下载中文件夹的显隐     */    private void updateDownloadingFolder() {        ArrayList<DownloadJob> jobsList = mDownloadManager.getProvider()                .getQueuedDownloads();        if (null != jobsList && jobsList.size() > 0) {            if (adapter != null && adapter.isDeleteState())                mDowning_folder.setVisibility(View.GONE);            else                mDowning_folder.setVisibility(View.VISIBLE);        } else {            mDowning_folder.setVisibility(View.GONE);        }    }    /**     * 更新下载文件夹的状态     */    private void updateDownLoadingFolderStatus() {        ArrayList<DownloadJob> jobsList = mDownloadManager.getProvider().getQueuedDownloads();        float totalRate = 0;        boolean isAllPause = true;        for (DownloadJob job : jobsList) {            totalRate += Float.parseFloat((job.getRate()).replace("KB/s", ""));            if (job.getStatus() == DownloadJob.DOWNLOADING) {                isAllPause = false;            }        }        if (isAllPause) {            mRate_text.setText("0KB/s");        } else {            mRate_text.setText(totalRate + "KB/s");        }        String str ="(" + jobsList.size() + ")";        SpannableStringBuilder style=new SpannableStringBuilder(str);        style.setSpan(new ForegroundColorSpan(ChaoJiShiPinApplication.getInstatnce().getResources().getColor(R.color.color_FF1E27)),0,str.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        mDowningJobsCount.setText(style);    }    private void setupListView() {        SparseArray<DownloadFolderJob> jobs = mDownloadManager.getProvider().getFolderJobs();        ArrayList<DownloadJob> jobsList = mDownloadManager.getProvider()                .getQueuedDownloads();        if ((jobs != null && jobs.size() > 0) || (jobsList != null && jobsList.size() > 0)) {            mListView.setVisibility(View.VISIBLE);            download_no_item.setVisibility(View.GONE);//            downloadFragment.memory_info.setVisibility(View.VISIBLE);        } else {            mListView.setVisibility(View.GONE);            download_no_item.setVisibility(View.VISIBLE);//            downloadFragment.memory_info.setVisibility(View.GONE);        }    }    @Override    public boolean onItemLongClick(AdapterView<?> parent, View view,                                   int position, long id) {//        downloadFragment.updateEditView();        return false;    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (adapter.isDeleteState()) {            adapter.setDeleteItem(position, ((SwipeMenuLayout) view).getContentView());        } else {            DownloadFolderJob floderJob = getJob(position);            if (floderJob.getDownloadJobs().size() == 1) {                DownloadJob job = floderJob.getDownloadJobs().valueAt(0);                if (job.getProgress() >= 10) {                    if (DownloadHelper.getAbsolutePath(job.getEntity(), job                            .getEntity().getPath()) == null                            || DownloadHelper.getDownloadedFileSize(                            job.getEntity(), job.getEntity().getPath()) == 0) {                        Toast.makeText(getActivity(),                                R.string.file_has_been_removed, Toast.LENGTH_SHORT)                                .show();                        return;                    }                    // }                    String filePath = DownloadHelper.getAbsolutePath(                            job.getEntity(), job.getEntity().getPath());                    Log.i("play_video", "filePath is " + filePath);                    if (!TextUtils.isEmpty(filePath)) {                        File file = new File(filePath);                        if (file.exists()) {                            mDownloadManager.playVideo(job);                            mDownloadManager.setIfWatch(job.getEntity(), "true");                            mDownloadManager.notifyObservers();                            Log.i("iswatch", "set ifwatch " + job.getEntity().getIfWatch());                        } else {                            ToastUtil.showShortToast(getActivity(),                                    R.string.filedeletetip);                        }                    } else {                        ToastUtil.showShortToast(getActivity(),                                R.string.filedeletetip);                    }                } else {                    Toast.makeText(getActivity(), R.string.download_can_play_rate,                            Toast.LENGTH_SHORT).show();                }            } else {                // 点击下载剧集列表，当多集时点击跳到下载专辑信息界面                Intent intent = new Intent(getActivity(), DownloadJobActivity.class);                intent.putExtra("index", position);                intent.putExtra("mediaName", floderJob.getMediaName());                intent.putExtra("mediaId", floderJob.getMediaId());                startActivity(intent);            }        }    }    private DownloadFolderJob getJob(int position) {        return (DownloadFolderJob) mListView.getAdapter().getItem(position);    }    public void updateDeleteView(View view) {        if (mListView == null) {            return;        }        if (adapter == null) {            adapter = (DownloadFolderAdapter) mListView.getAdapter();            adapter.fragment = downloadFragment;        }        if (adapter == null)            return;        if (adapter.isDeleteState()) {            mListView.setIsOpenStatus(true);            // 切回原来状态//			((DownloadActivity)getActivity()).mDeleteIcon.setText(getResources().getString(R.string.edit));            downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));            view.setVisibility(View.GONE);            adapter.setDeleteState(false);            updateDownloadingFolder();            adapter.deletedNum = 0;            for (int i = 0; i < adapter.mChecked.size(); i++) {                adapter.mChecked.set(i, false);            }        } else {            // 切到编辑状态            mListView.setIsOpenStatus(false);//			((DownloadActivity)getActivity()).mDeleteIcon.setText(getResources().getString(R.string.done));            downloadFragment.changeDeleteIconText(getResources().getString(R.string.done));            mDowning_folder.setVisibility(View.GONE);            view.setVisibility(View.VISIBLE);            adapter.setDeleteState(true);        }        adapter.notifyDataSetChanged();    }    public void updateConfirmDeleteView(View view) {        if (mListView == null) {            return;        }        if (adapter == null) {            adapter = (DownloadFolderAdapter) mListView.getAdapter();            adapter.fragment = downloadFragment;        }        if (adapter == null)            return;        if (adapter.isDeleteState() && adapter.deletedNum > 0) {            deleteTip(view);        }    }    public void handleBackOnDelete() {        if (adapter.isDeleteState() && adapter.getCount() > 0) {            adapter.setDeleteState(false);            adapter.deletedNum = 0;            for (int i = 0; i < adapter.mChecked.size(); i++) {                adapter.mChecked.set(i, false);            }            adapter.notifyDataSetChanged();        }    }    // 全选    public void selectDownloadVideo() {        if (null == adapter)            return;        ArrayList<Boolean> userChecked = adapter.mChecked;        // 如果用户点击了全选按钮        if (adapter.deletedNum != getRemainNum()) {            adapter.deletedNum = getRemainNum();//             + "("+ adapter.deletedNum+ ")"            String content = getActivity().getString(R.string.delete_up);            if (null != mConfirm_delete)                mConfirm_delete.setText(content);            mConfirm_delete.setTextColor(getResources().getColor(R.color.color_FF1E27));            for (int i = 0; i < adapter.getCount(); i++) {                userChecked.set(i, true);            }        } else {            // 如果用户点击了取消全选按钮//			if(null != mTitle)//				mTitle.setVisibility(View.VISIBLE);//			if(null != mUserDeletecount)//				mUserDeletecount.setVisibility(View.GONE);//			if(null != mDeleteIcon)//				mDeleteIcon.setBackgroundResource(R.drawable.pic_delete_normal1);            if (null != mConfirm_delete)                mConfirm_delete.setText(R.string.delete_up);            mConfirm_delete.setTextColor(getResources().getColor(R.color.all_select));            // 用户选择取消全选则用户当前选中项为0            adapter.deletedNum = 0;            for (int i = 0; i < adapter.getCount(); i++) {                userChecked.set(i, false);            }        }        adapter.notifyDataSetChanged();    }    private void deleteTip(final View view) {        try {            Builder builder = new Builder(getActivity());            builder.setTitle(R.string.tip);            int deletingCount = adapter.deletedNum;            String deleteTipContent = getString(R.string.delete_up)                    + deletingCount                    + getString(R.string.delete_below);            builder.setMessage(deleteTipContent);            builder.setPositiveButton(getString(R.string.ok), new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                    //new executeDelete().execute();                    downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));//                    if (mDeleteIcon != null) {//                        mDeleteIcon.setText(getResources().getString(R.string.edit));//                    }                    deleteDownloadfile();                    view.setVisibility(View.GONE);                }            });            builder.setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });            Dialog dialog = builder.create();            dialog.show();        } catch (Exception e) {            e.printStackTrace();        }    }    private void showAvailableSpace() {        if (ContainSizeManager.getInstance() != null) {            ContainSizeManager.getInstance().setView(this.getActivity());            ContainSizeManager.getInstance().ansynHandlerSdcardSize();        }    }    private void deleteDownloadfile() {        showLoadingView(getActivity(), false, R.string.deleting);//		new Thread() {//			@Override//			public void run() {        executeDelete();        mHandler.sendEmptyMessage(Constants.MESSAGE_DELETE_DOWNLOAD_FILE);//			}////		}.start();    }//    private class executeDelete extends AsyncTask<Object, Object, Object> {//        @Override//        protected void onPreExecute() {//            super.onPreExecute();//            showLoadingView(getActivity(), false, R.string.deleting);//        }////        @Override//        protected Object doInBackground(Object... params) {//            executeDelete();//            return null;//        }////        @Override//        protected void onPostExecute(Object result) {//            super.onPostExecute(result);//            cancelLoadingView();//            cancelDelete(false);//            mDownloadManager.registerDownloadObserver(DownloadListFragment.this);//            ToastUtil.toastPrompt(getActivity(), R.string.delete_success, 0);//            if (DownloadFragment.mSizeManager != null) {//                DownloadFragment.mSizeManager.ansynHandlerSdcardSize();//            }//            mDownloadManager.notifyObservers();//        }//    }    private void cancelDelete(boolean deleteState) {        adapter.setDeleteState(deleteState);//		mDeleteIcon.setBackgroundResource(R.drawable.pic_delete_normal1);        updateDeleteIcon();//		mTitle.setVisibility(View.VISIBLE);//		mUserDeletecount.setVisibility(View.GONE);        adapter.deletedNum = 0;        if (null != adapter) {            for (int i = 0; i < adapter.mChecked.size(); i++) {                adapter.mChecked.set(i, false);            }        }    }    private void executeDelete() {        ArrayList<Boolean> bools = adapter.mChecked;        mDownloadManager.deregisterDownloadObserver(this);        SparseArray<DownloadFolderJob> folderJobs = adapter.getList();        ArrayList<Integer> keys = new ArrayList<Integer>();        for (int pos = 0; pos < bools.size(); pos++) {            if (bools.get(pos)) {                DownloadFolderJob folderJob = folderJobs.valueAt(pos);                if (null != folderJob) {                    keys.add(folderJob.getIndex());                }            }        }        for (int key : keys) {            DownloadFolderJob folderJob = folderJobs.get(key);            SparseArray<DownloadJob> jobs = folderJob.getDownloadJobs();            for (int i = 0; i < jobs.size(); i++) {                mDownloadManager.deleteDownload(jobs.valueAt(i));            }            folderJobs.delete(key);        }        mDownloadManager.startNextTask();    }    private void executeDeleteOneItem(int position) {        showLoadingView(getActivity(), false, R.string.deleting);        SparseArray<DownloadFolderJob> folderJobs = adapter.getList();        DownloadFolderJob folderJob = folderJobs.valueAt(position);        SparseArray<DownloadJob> jobs = folderJob.getDownloadJobs();        for (int i = 0; i < jobs.size(); i++) {            mDownloadManager.deleteDownload(jobs.valueAt(i));        }        folderJobs.delete(folderJob.getIndex());        mDownloadManager.startNextTask();        mHandler.sendEmptyMessage(Constants.MESSAGE_DELETE_DOWNLOAD_FILE);        downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));//        downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));//        mListView.setIsOpenStatus(true);    }    private void showLoadingView(Context context, boolean isCouldCancel, int strId) {        mTipDialog = new Dialog(context, R.style.waiting);        mTipDialog.setContentView(R.layout.dialog_waiting);        TextView textView = (TextView) mTipDialog.findViewById(R.id.waiting_text);        textView.setText(strId);        mTipDialog.setCanceledOnTouchOutside(isCouldCancel);        mTipDialog.setCancelable(isCouldCancel);        if (!mTipDialog.isShowing()) {            mTipDialog.show();        }    }    private void cancelLoadingView() {        if (null != mTipDialog && mTipDialog.isShowing()) {            mTipDialog.cancel();        }    }    public int getItemCount() {        return mDownloadManager.getAllDownloads().size();    }    public int getRemainNum() {        return mDownloadManager.getRemainNum();    }    //	public void updateDeleteIcon(View view) {//		if(MoviesApplication.getInstance().getDownloadManager().getAllDownloads().size()>0){//			view.setVisibility(View.VISIBLE);//		} else {//			view.setVisibility(View.INVISIBLE);//		}//	}    // 设置我的下载界面 编辑按钮显示    private void updateDeleteIcon() {        if (ChaoJiShiPinApplication.getInstatnce().getDownloadManager().getCompletedDownloads().size() > 0) {            downloadFragment.setFilterButtonState(true);        } else {            downloadFragment.setFilterButtonState(false);        }    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.item_downing_folder:                SwipeMenuLayout mSwipe = null;                mSwipe = mListView.getSwipeMenuLayout();                if (mSwipe!=null && mSwipe.isOpen()){                    mListView.getSwipeMenuLayout().smoothCloseMenu();                    downloadFragment.changeDeleteIconText(getResources().getString(R.string.edit));                    return;                }else {                    Intent intent = new Intent(getActivity(), DownloadJobActivity.class);                    intent.putExtra("index", -1);                    startActivity(intent);                }                break;//            case R.id.delete_layout://                if (mCurrItem == 0) {//                    ArrayList<DownloadJob> jobsList = ChaoJiShiPinApplication.getInstatnce().getDownloadManager().getProvider().getCompletedDownloads();//                    if (null != jobsList && jobsList.size() > 0) {//                        updateDeleteView(mBottomlayout);//                        mUserDeletecount.setText(R.string.check_all);//                        mConfirm_delete.setText(R.string.delete_up);//                        mConfirm_delete.setTextColor(getResources().getColor(R.color.all_select));//                    }////                } else if (mCurrItem == 1) {////				mLocalVideoFragment.updateDeleteView();//                }//                break;            case R.id.all_select:                if (mCurrItem == 0) {                    downloadFragment.checkUserSelectAll();//				}                    selectDownloadVideo();                } else if (mCurrItem == 1) {                }                break;            case R.id.confirm_delete:                if (mCurrItem == 0) {                    updateConfirmDeleteView(mBottomlayout);                } else if (mCurrItem == 1) {                }                break;        }    }    public DownloadFragment getDownloadFragment() {        return downloadFragment;    }    public void setDownloadFragment(DownloadFragment downloadFragment) {        this.downloadFragment = downloadFragment;    }}